// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: pizza/pizza.proto

package pizza

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PizzaService_CreatePizza_FullMethodName       = "/pizza.PizzaService/CreatePizza"
	PizzaService_GetPizzas_FullMethodName         = "/pizza.PizzaService/GetPizzas"
	PizzaService_GetPizzaById_FullMethodName      = "/pizza.PizzaService/GetPizzaById"
	PizzaService_UpdatePizza_FullMethodName       = "/pizza.PizzaService/UpdatePizza"
	PizzaService_DeletePizza_FullMethodName       = "/pizza.PizzaService/DeletePizza"
	PizzaService_CheckIsCartExist_FullMethodName  = "/pizza.PizzaService/CheckIsCartExist"
	PizzaService_Cart_FullMethodName              = "/pizza.PizzaService/Cart"
	PizzaService_CheckIsOrdered_FullMethodName    = "/pizza.PizzaService/CheckIsOrdered"
	PizzaService_OrderPizza_FullMethodName        = "/pizza.PizzaService/OrderPizza"
	PizzaService_GetUserHistory_FullMethodName    = "/pizza.PizzaService/GetUserHistory"
	PizzaService_UpdatePizzaInCart_FullMethodName = "/pizza.PizzaService/UpdatePizzaInCart"
)

// PizzaServiceClient is the client API for PizzaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PizzaServiceClient interface {
	CreatePizza(ctx context.Context, in *CreatePizzaRequest, opts ...grpc.CallOption) (*CreatePizzaResponse, error)
	GetPizzas(ctx context.Context, in *GetPizzasRequest, opts ...grpc.CallOption) (*GetPizzasResponse, error)
	GetPizzaById(ctx context.Context, in *GetPizzaByIdRequest, opts ...grpc.CallOption) (*GetPizzaByIdResponse, error)
	UpdatePizza(ctx context.Context, in *UpdatePizzaRequest, opts ...grpc.CallOption) (*UpdatePizzaResponse, error)
	DeletePizza(ctx context.Context, in *DeletePizzaRequest, opts ...grpc.CallOption) (*DeletePizzaResponse, error)
	CheckIsCartExist(ctx context.Context, in *CheckIsCartExistRequest, opts ...grpc.CallOption) (*CheckIsCartExistResponse, error)
	Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error)
	CheckIsOrdered(ctx context.Context, in *CheckIsOrderedRequest, opts ...grpc.CallOption) (*CheckIsOrderedResponse, error)
	OrderPizza(ctx context.Context, in *OrderPizzaRequest, opts ...grpc.CallOption) (*OrderPizzaResponse, error)
	GetUserHistory(ctx context.Context, in *GetUserHistoryRequest, opts ...grpc.CallOption) (*GetUserHistoryResponse, error)
	UpdatePizzaInCart(ctx context.Context, in *CartItems, opts ...grpc.CallOption) (*CartItemsResp, error)
}

type pizzaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPizzaServiceClient(cc grpc.ClientConnInterface) PizzaServiceClient {
	return &pizzaServiceClient{cc}
}

func (c *pizzaServiceClient) CreatePizza(ctx context.Context, in *CreatePizzaRequest, opts ...grpc.CallOption) (*CreatePizzaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePizzaResponse)
	err := c.cc.Invoke(ctx, PizzaService_CreatePizza_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) GetPizzas(ctx context.Context, in *GetPizzasRequest, opts ...grpc.CallOption) (*GetPizzasResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPizzasResponse)
	err := c.cc.Invoke(ctx, PizzaService_GetPizzas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) GetPizzaById(ctx context.Context, in *GetPizzaByIdRequest, opts ...grpc.CallOption) (*GetPizzaByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPizzaByIdResponse)
	err := c.cc.Invoke(ctx, PizzaService_GetPizzaById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) UpdatePizza(ctx context.Context, in *UpdatePizzaRequest, opts ...grpc.CallOption) (*UpdatePizzaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePizzaResponse)
	err := c.cc.Invoke(ctx, PizzaService_UpdatePizza_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) DeletePizza(ctx context.Context, in *DeletePizzaRequest, opts ...grpc.CallOption) (*DeletePizzaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePizzaResponse)
	err := c.cc.Invoke(ctx, PizzaService_DeletePizza_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) CheckIsCartExist(ctx context.Context, in *CheckIsCartExistRequest, opts ...grpc.CallOption) (*CheckIsCartExistResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIsCartExistResponse)
	err := c.cc.Invoke(ctx, PizzaService_CheckIsCartExist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) Cart(ctx context.Context, in *CartRequest, opts ...grpc.CallOption) (*CartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartResponse)
	err := c.cc.Invoke(ctx, PizzaService_Cart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) CheckIsOrdered(ctx context.Context, in *CheckIsOrderedRequest, opts ...grpc.CallOption) (*CheckIsOrderedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckIsOrderedResponse)
	err := c.cc.Invoke(ctx, PizzaService_CheckIsOrdered_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) OrderPizza(ctx context.Context, in *OrderPizzaRequest, opts ...grpc.CallOption) (*OrderPizzaResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderPizzaResponse)
	err := c.cc.Invoke(ctx, PizzaService_OrderPizza_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) GetUserHistory(ctx context.Context, in *GetUserHistoryRequest, opts ...grpc.CallOption) (*GetUserHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserHistoryResponse)
	err := c.cc.Invoke(ctx, PizzaService_GetUserHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pizzaServiceClient) UpdatePizzaInCart(ctx context.Context, in *CartItems, opts ...grpc.CallOption) (*CartItemsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CartItemsResp)
	err := c.cc.Invoke(ctx, PizzaService_UpdatePizzaInCart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PizzaServiceServer is the server API for PizzaService service.
// All implementations must embed UnimplementedPizzaServiceServer
// for forward compatibility.
type PizzaServiceServer interface {
	CreatePizza(context.Context, *CreatePizzaRequest) (*CreatePizzaResponse, error)
	GetPizzas(context.Context, *GetPizzasRequest) (*GetPizzasResponse, error)
	GetPizzaById(context.Context, *GetPizzaByIdRequest) (*GetPizzaByIdResponse, error)
	UpdatePizza(context.Context, *UpdatePizzaRequest) (*UpdatePizzaResponse, error)
	DeletePizza(context.Context, *DeletePizzaRequest) (*DeletePizzaResponse, error)
	CheckIsCartExist(context.Context, *CheckIsCartExistRequest) (*CheckIsCartExistResponse, error)
	Cart(context.Context, *CartRequest) (*CartResponse, error)
	CheckIsOrdered(context.Context, *CheckIsOrderedRequest) (*CheckIsOrderedResponse, error)
	OrderPizza(context.Context, *OrderPizzaRequest) (*OrderPizzaResponse, error)
	GetUserHistory(context.Context, *GetUserHistoryRequest) (*GetUserHistoryResponse, error)
	UpdatePizzaInCart(context.Context, *CartItems) (*CartItemsResp, error)
	mustEmbedUnimplementedPizzaServiceServer()
}

// UnimplementedPizzaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPizzaServiceServer struct{}

func (UnimplementedPizzaServiceServer) CreatePizza(context.Context, *CreatePizzaRequest) (*CreatePizzaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePizza not implemented")
}
func (UnimplementedPizzaServiceServer) GetPizzas(context.Context, *GetPizzasRequest) (*GetPizzasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPizzas not implemented")
}
func (UnimplementedPizzaServiceServer) GetPizzaById(context.Context, *GetPizzaByIdRequest) (*GetPizzaByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPizzaById not implemented")
}
func (UnimplementedPizzaServiceServer) UpdatePizza(context.Context, *UpdatePizzaRequest) (*UpdatePizzaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePizza not implemented")
}
func (UnimplementedPizzaServiceServer) DeletePizza(context.Context, *DeletePizzaRequest) (*DeletePizzaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePizza not implemented")
}
func (UnimplementedPizzaServiceServer) CheckIsCartExist(context.Context, *CheckIsCartExistRequest) (*CheckIsCartExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsCartExist not implemented")
}
func (UnimplementedPizzaServiceServer) Cart(context.Context, *CartRequest) (*CartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cart not implemented")
}
func (UnimplementedPizzaServiceServer) CheckIsOrdered(context.Context, *CheckIsOrderedRequest) (*CheckIsOrderedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsOrdered not implemented")
}
func (UnimplementedPizzaServiceServer) OrderPizza(context.Context, *OrderPizzaRequest) (*OrderPizzaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderPizza not implemented")
}
func (UnimplementedPizzaServiceServer) GetUserHistory(context.Context, *GetUserHistoryRequest) (*GetUserHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserHistory not implemented")
}
func (UnimplementedPizzaServiceServer) UpdatePizzaInCart(context.Context, *CartItems) (*CartItemsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePizzaInCart not implemented")
}
func (UnimplementedPizzaServiceServer) mustEmbedUnimplementedPizzaServiceServer() {}
func (UnimplementedPizzaServiceServer) testEmbeddedByValue()                      {}

// UnsafePizzaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PizzaServiceServer will
// result in compilation errors.
type UnsafePizzaServiceServer interface {
	mustEmbedUnimplementedPizzaServiceServer()
}

func RegisterPizzaServiceServer(s grpc.ServiceRegistrar, srv PizzaServiceServer) {
	// If the following call pancis, it indicates UnimplementedPizzaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PizzaService_ServiceDesc, srv)
}

func _PizzaService_CreatePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePizzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).CreatePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_CreatePizza_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).CreatePizza(ctx, req.(*CreatePizzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_GetPizzas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPizzasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).GetPizzas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_GetPizzas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).GetPizzas(ctx, req.(*GetPizzasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_GetPizzaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPizzaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).GetPizzaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_GetPizzaById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).GetPizzaById(ctx, req.(*GetPizzaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_UpdatePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePizzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).UpdatePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_UpdatePizza_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).UpdatePizza(ctx, req.(*UpdatePizzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_DeletePizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePizzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).DeletePizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_DeletePizza_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).DeletePizza(ctx, req.(*DeletePizzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_CheckIsCartExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsCartExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).CheckIsCartExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_CheckIsCartExist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).CheckIsCartExist(ctx, req.(*CheckIsCartExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_Cart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).Cart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_Cart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).Cart(ctx, req.(*CartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_CheckIsOrdered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsOrderedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).CheckIsOrdered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_CheckIsOrdered_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).CheckIsOrdered(ctx, req.(*CheckIsOrderedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_OrderPizza_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderPizzaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).OrderPizza(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_OrderPizza_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).OrderPizza(ctx, req.(*OrderPizzaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_GetUserHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).GetUserHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_GetUserHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).GetUserHistory(ctx, req.(*GetUserHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PizzaService_UpdatePizzaInCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CartItems)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PizzaServiceServer).UpdatePizzaInCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PizzaService_UpdatePizzaInCart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PizzaServiceServer).UpdatePizzaInCart(ctx, req.(*CartItems))
	}
	return interceptor(ctx, in, info, handler)
}

// PizzaService_ServiceDesc is the grpc.ServiceDesc for PizzaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PizzaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pizza.PizzaService",
	HandlerType: (*PizzaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePizza",
			Handler:    _PizzaService_CreatePizza_Handler,
		},
		{
			MethodName: "GetPizzas",
			Handler:    _PizzaService_GetPizzas_Handler,
		},
		{
			MethodName: "GetPizzaById",
			Handler:    _PizzaService_GetPizzaById_Handler,
		},
		{
			MethodName: "UpdatePizza",
			Handler:    _PizzaService_UpdatePizza_Handler,
		},
		{
			MethodName: "DeletePizza",
			Handler:    _PizzaService_DeletePizza_Handler,
		},
		{
			MethodName: "CheckIsCartExist",
			Handler:    _PizzaService_CheckIsCartExist_Handler,
		},
		{
			MethodName: "Cart",
			Handler:    _PizzaService_Cart_Handler,
		},
		{
			MethodName: "CheckIsOrdered",
			Handler:    _PizzaService_CheckIsOrdered_Handler,
		},
		{
			MethodName: "OrderPizza",
			Handler:    _PizzaService_OrderPizza_Handler,
		},
		{
			MethodName: "GetUserHistory",
			Handler:    _PizzaService_GetUserHistory_Handler,
		},
		{
			MethodName: "UpdatePizzaInCart",
			Handler:    _PizzaService_UpdatePizzaInCart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pizza/pizza.proto",
}
