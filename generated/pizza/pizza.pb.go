// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.29.1
// source: pizza/pizza.proto

package pizza

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePizzaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price         float32                `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	TypeId        int32                  `protobuf:"varint,3,opt,name=typeId,proto3" json:"typeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePizzaRequest) Reset() {
	*x = CreatePizzaRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePizzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePizzaRequest) ProtoMessage() {}

func (x *CreatePizzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePizzaRequest.ProtoReflect.Descriptor instead.
func (*CreatePizzaRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePizzaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePizzaRequest) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *CreatePizzaRequest) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type CreatePizzaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePizzaResponse) Reset() {
	*x = CreatePizzaResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePizzaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePizzaResponse) ProtoMessage() {}

func (x *CreatePizzaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePizzaResponse.ProtoReflect.Descriptor instead.
func (*CreatePizzaResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePizzaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPizzasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TypeId        int32                  `protobuf:"varint,1,opt,name=typeId,proto3" json:"typeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPizzasRequest) Reset() {
	*x = GetPizzasRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPizzasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPizzasRequest) ProtoMessage() {}

func (x *GetPizzasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPizzasRequest.ProtoReflect.Descriptor instead.
func (*GetPizzasRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{2}
}

func (x *GetPizzasRequest) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type GetPizzasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pizzas        []*Pizzas              `protobuf:"bytes,1,rep,name=pizzas,proto3" json:"pizzas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPizzasResponse) Reset() {
	*x = GetPizzasResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPizzasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPizzasResponse) ProtoMessage() {}

func (x *GetPizzasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPizzasResponse.ProtoReflect.Descriptor instead.
func (*GetPizzasResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{3}
}

func (x *GetPizzasResponse) GetPizzas() []*Pizzas {
	if x != nil {
		return x.Pizzas
	}
	return nil
}

type Pizzas struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price         float32                `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pizzas) Reset() {
	*x = Pizzas{}
	mi := &file_pizza_pizza_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pizzas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pizzas) ProtoMessage() {}

func (x *Pizzas) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pizzas.ProtoReflect.Descriptor instead.
func (*Pizzas) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{4}
}

func (x *Pizzas) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pizzas) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type GetPizzaByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId        int32                  `protobuf:"varint,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPizzaByIdRequest) Reset() {
	*x = GetPizzaByIdRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPizzaByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPizzaByIdRequest) ProtoMessage() {}

func (x *GetPizzaByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPizzaByIdRequest.ProtoReflect.Descriptor instead.
func (*GetPizzaByIdRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{5}
}

func (x *GetPizzaByIdRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetPizzaByIdRequest) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type GetPizzaByIdResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price         float32                `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPizzaByIdResponse) Reset() {
	*x = GetPizzaByIdResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPizzaByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPizzaByIdResponse) ProtoMessage() {}

func (x *GetPizzaByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPizzaByIdResponse.ProtoReflect.Descriptor instead.
func (*GetPizzaByIdResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{6}
}

func (x *GetPizzaByIdResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetPizzaByIdResponse) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

type UpdatePizzaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Price         float32                `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Id            int32                  `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	TypeId        int32                  `protobuf:"varint,5,opt,name=typeId,proto3" json:"typeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePizzaRequest) Reset() {
	*x = UpdatePizzaRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePizzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePizzaRequest) ProtoMessage() {}

func (x *UpdatePizzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePizzaRequest.ProtoReflect.Descriptor instead.
func (*UpdatePizzaRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePizzaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePizzaRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdatePizzaRequest) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdatePizzaRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdatePizzaRequest) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type UpdatePizzaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Price         float32                `protobuf:"fixed32,2,opt,name=price,proto3" json:"price,omitempty"`
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePizzaResponse) Reset() {
	*x = UpdatePizzaResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePizzaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePizzaResponse) ProtoMessage() {}

func (x *UpdatePizzaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePizzaResponse.ProtoReflect.Descriptor instead.
func (*UpdatePizzaResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePizzaResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdatePizzaResponse) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *UpdatePizzaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeletePizzaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId        int32                  `protobuf:"varint,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePizzaRequest) Reset() {
	*x = DeletePizzaRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePizzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePizzaRequest) ProtoMessage() {}

func (x *DeletePizzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePizzaRequest.ProtoReflect.Descriptor instead.
func (*DeletePizzaRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{9}
}

func (x *DeletePizzaRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeletePizzaRequest) GetTypeId() int32 {
	if x != nil {
		return x.TypeId
	}
	return 0
}

type DeletePizzaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePizzaResponse) Reset() {
	*x = DeletePizzaResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePizzaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePizzaResponse) ProtoMessage() {}

func (x *DeletePizzaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePizzaResponse.ProtoReflect.Descriptor instead.
func (*DeletePizzaResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{10}
}

func (x *DeletePizzaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckIsCartExistRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	Id            int32                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIsCartExistRequest) Reset() {
	*x = CheckIsCartExistRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsCartExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsCartExistRequest) ProtoMessage() {}

func (x *CheckIsCartExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsCartExistRequest.ProtoReflect.Descriptor instead.
func (*CheckIsCartExistRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{11}
}

func (x *CheckIsCartExistRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckIsCartExistRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CheckIsCartExistRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CheckIsCartExistResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	IsActive      bool                   `protobuf:"varint,2,opt,name=isActive,proto3" json:"isActive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIsCartExistResponse) Reset() {
	*x = CheckIsCartExistResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsCartExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsCartExistResponse) ProtoMessage() {}

func (x *CheckIsCartExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsCartExistResponse.ProtoReflect.Descriptor instead.
func (*CheckIsCartExistResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{12}
}

func (x *CheckIsCartExistResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckIsCartExistResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

type CartRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	IsActive      bool                   `protobuf:"varint,3,opt,name=isActive,proto3" json:"isActive,omitempty"`
	TotalCost     float32                `protobuf:"fixed32,4,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	CartItemId    int32                  `protobuf:"varint,5,opt,name=cartItemId,proto3" json:"cartItemId,omitempty"`
	PizzaId       int32                  `protobuf:"varint,6,opt,name=pizzaId,proto3" json:"pizzaId,omitempty"`
	PizzaTypeId   int32                  `protobuf:"varint,7,opt,name=pizzaTypeId,proto3" json:"pizzaTypeId,omitempty"`
	Cost          float32                `protobuf:"fixed32,8,opt,name=cost,proto3" json:"cost,omitempty"`
	Quantity      int32                  `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	CartId        int32                  `protobuf:"varint,10,opt,name=cartId,proto3" json:"cartId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartRequest) Reset() {
	*x = CartRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartRequest) ProtoMessage() {}

func (x *CartRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartRequest.ProtoReflect.Descriptor instead.
func (*CartRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{13}
}

func (x *CartRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CartRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CartRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CartRequest) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *CartRequest) GetCartItemId() int32 {
	if x != nil {
		return x.CartItemId
	}
	return 0
}

func (x *CartRequest) GetPizzaId() int32 {
	if x != nil {
		return x.PizzaId
	}
	return 0
}

func (x *CartRequest) GetPizzaTypeId() int32 {
	if x != nil {
		return x.PizzaTypeId
	}
	return 0
}

func (x *CartRequest) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CartRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CartRequest) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

type CartResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartResponse) Reset() {
	*x = CartResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartResponse) ProtoMessage() {}

func (x *CartResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartResponse.ProtoReflect.Descriptor instead.
func (*CartResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{14}
}

func (x *CartResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CheckIsOrderedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int32                  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	IsOrdered     bool                   `protobuf:"varint,2,opt,name=isOrdered,proto3" json:"isOrdered,omitempty"`
	Id            int32                  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIsOrderedRequest) Reset() {
	*x = CheckIsOrderedRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsOrderedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsOrderedRequest) ProtoMessage() {}

func (x *CheckIsOrderedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsOrderedRequest.ProtoReflect.Descriptor instead.
func (*CheckIsOrderedRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{15}
}

func (x *CheckIsOrderedRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CheckIsOrderedRequest) GetIsOrdered() bool {
	if x != nil {
		return x.IsOrdered
	}
	return false
}

func (x *CheckIsOrderedRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type CheckIsOrderedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	IsOrdered     bool                   `protobuf:"varint,2,opt,name=isOrdered,proto3" json:"isOrdered,omitempty"`
	Status        string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckIsOrderedResponse) Reset() {
	*x = CheckIsOrderedResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckIsOrderedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckIsOrderedResponse) ProtoMessage() {}

func (x *CheckIsOrderedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckIsOrderedResponse.ProtoReflect.Descriptor instead.
func (*CheckIsOrderedResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{16}
}

func (x *CheckIsOrderedResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CheckIsOrderedResponse) GetIsOrdered() bool {
	if x != nil {
		return x.IsOrdered
	}
	return false
}

func (x *CheckIsOrderedResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type OrderPizzaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int32                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Date          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	IsOrdered     bool                   `protobuf:"varint,3,opt,name=isOrdered,proto3" json:"isOrdered,omitempty"`
	UserId        int32                  `protobuf:"varint,4,opt,name=userId,proto3" json:"userId,omitempty"`
	Status        string                 `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	ItemId        int32                  `protobuf:"varint,6,opt,name=itemId,proto3" json:"itemId,omitempty"`
	PizzaId       int32                  `protobuf:"varint,7,opt,name=pizza_id,json=pizzaId,proto3" json:"pizza_id,omitempty"`
	PizzaTypeId   int32                  `protobuf:"varint,8,opt,name=pizza_type_id,json=pizzaTypeId,proto3" json:"pizza_type_id,omitempty"`
	CartId        int32                  `protobuf:"varint,9,opt,name=cart_id,json=cartId,proto3" json:"cart_id,omitempty"`
	Quantity      int32                  `protobuf:"varint,10,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderPizzaRequest) Reset() {
	*x = OrderPizzaRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderPizzaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPizzaRequest) ProtoMessage() {}

func (x *OrderPizzaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPizzaRequest.ProtoReflect.Descriptor instead.
func (*OrderPizzaRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{17}
}

func (x *OrderPizzaRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderPizzaRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *OrderPizzaRequest) GetIsOrdered() bool {
	if x != nil {
		return x.IsOrdered
	}
	return false
}

func (x *OrderPizzaRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderPizzaRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderPizzaRequest) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *OrderPizzaRequest) GetPizzaId() int32 {
	if x != nil {
		return x.PizzaId
	}
	return 0
}

func (x *OrderPizzaRequest) GetPizzaTypeId() int32 {
	if x != nil {
		return x.PizzaTypeId
	}
	return 0
}

func (x *OrderPizzaRequest) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *OrderPizzaRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type OrderPizzaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderPizzaResponse) Reset() {
	*x = OrderPizzaResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderPizzaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPizzaResponse) ProtoMessage() {}

func (x *OrderPizzaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPizzaResponse.ProtoReflect.Descriptor instead.
func (*OrderPizzaResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{18}
}

func (x *OrderPizzaResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CartItems struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalCost     float32                `protobuf:"fixed32,1,opt,name=totalCost,proto3" json:"totalCost,omitempty"`
	CartItemId    int32                  `protobuf:"varint,2,opt,name=cartItemId,proto3" json:"cartItemId,omitempty"`
	PizzaId       int32                  `protobuf:"varint,3,opt,name=pizzaId,proto3" json:"pizzaId,omitempty"`
	PizzaTypeId   int32                  `protobuf:"varint,4,opt,name=pizzaTypeId,proto3" json:"pizzaTypeId,omitempty"`
	Cost          float32                `protobuf:"fixed32,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Quantity      int32                  `protobuf:"varint,6,opt,name=quantity,proto3" json:"quantity,omitempty"`
	CartId        int32                  `protobuf:"varint,7,opt,name=cartId,proto3" json:"cartId,omitempty"`
	Id            int32                  `protobuf:"varint,8,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int32                  `protobuf:"varint,9,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartItems) Reset() {
	*x = CartItems{}
	mi := &file_pizza_pizza_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartItems) ProtoMessage() {}

func (x *CartItems) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartItems.ProtoReflect.Descriptor instead.
func (*CartItems) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{19}
}

func (x *CartItems) GetTotalCost() float32 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *CartItems) GetCartItemId() int32 {
	if x != nil {
		return x.CartItemId
	}
	return 0
}

func (x *CartItems) GetPizzaId() int32 {
	if x != nil {
		return x.PizzaId
	}
	return 0
}

func (x *CartItems) GetPizzaTypeId() int32 {
	if x != nil {
		return x.PizzaTypeId
	}
	return 0
}

func (x *CartItems) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CartItems) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CartItems) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *CartItems) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CartItems) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type CartItemsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CartItems     []*CartItems           `protobuf:"bytes,1,rep,name=cartItems,proto3" json:"cartItems,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CartId        int32                  `protobuf:"varint,3,opt,name=cartId,proto3" json:"cartId,omitempty"`
	PizzaId       int32                  `protobuf:"varint,4,opt,name=pizzaId,proto3" json:"pizzaId,omitempty"`
	Cost          float32                `protobuf:"fixed32,5,opt,name=cost,proto3" json:"cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CartItemsResp) Reset() {
	*x = CartItemsResp{}
	mi := &file_pizza_pizza_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CartItemsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CartItemsResp) ProtoMessage() {}

func (x *CartItemsResp) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CartItemsResp.ProtoReflect.Descriptor instead.
func (*CartItemsResp) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{20}
}

func (x *CartItemsResp) GetCartItems() []*CartItems {
	if x != nil {
		return x.CartItems
	}
	return nil
}

func (x *CartItemsResp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CartItemsResp) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *CartItemsResp) GetPizzaId() int32 {
	if x != nil {
		return x.PizzaId
	}
	return 0
}

func (x *CartItemsResp) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

type GetCartHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CartId        int32                  `protobuf:"varint,1,opt,name=cartId,proto3" json:"cartId,omitempty"`
	UserId        int32                  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCartHistoryRequest) Reset() {
	*x = GetCartHistoryRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCartHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCartHistoryRequest) ProtoMessage() {}

func (x *GetCartHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCartHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetCartHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{21}
}

func (x *GetCartHistoryRequest) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *GetCartHistoryRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetCartHistoryResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	CartId        int32                     `protobuf:"varint,1,opt,name=cartId,proto3" json:"cartId,omitempty"`
	Date          *timestamppb.Timestamp    `protobuf:"bytes,2,opt,name=date,proto3" json:"date,omitempty"`
	UserId        int32                     `protobuf:"varint,3,opt,name=userId,proto3" json:"userId,omitempty"`
	IsActive      bool                      `protobuf:"varint,4,opt,name=isActive,proto3" json:"isActive,omitempty"`
	CartHistory   []*GetCartHistoryResponse `protobuf:"bytes,5,rep,name=cartHistory,proto3" json:"cartHistory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCartHistoryResponse) Reset() {
	*x = GetCartHistoryResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCartHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCartHistoryResponse) ProtoMessage() {}

func (x *GetCartHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCartHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetCartHistoryResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{22}
}

func (x *GetCartHistoryResponse) GetCartId() int32 {
	if x != nil {
		return x.CartId
	}
	return 0
}

func (x *GetCartHistoryResponse) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *GetCartHistoryResponse) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetCartHistoryResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetCartHistoryResponse) GetCartHistory() []*GetCartHistoryResponse {
	if x != nil {
		return x.CartHistory
	}
	return nil
}

type GetCarItemtHistoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CartHistoryId int32                  `protobuf:"varint,1,opt,name=cartHistoryId,proto3" json:"cartHistoryId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCarItemtHistoryRequest) Reset() {
	*x = GetCarItemtHistoryRequest{}
	mi := &file_pizza_pizza_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCarItemtHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCarItemtHistoryRequest) ProtoMessage() {}

func (x *GetCarItemtHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCarItemtHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetCarItemtHistoryRequest) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{23}
}

func (x *GetCarItemtHistoryRequest) GetCartHistoryId() int32 {
	if x != nil {
		return x.CartHistoryId
	}
	return 0
}

type GetCarItemtHistoryResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	CartHistoryId int32                         `protobuf:"varint,1,opt,name=cartHistoryId,proto3" json:"cartHistoryId,omitempty"`
	PizzaId       int32                         `protobuf:"varint,2,opt,name=pizzaId,proto3" json:"pizzaId,omitempty"`
	PizzaTypeId   int32                         `protobuf:"varint,3,opt,name=pizzaTypeId,proto3" json:"pizzaTypeId,omitempty"`
	Cost          float32                       `protobuf:"fixed32,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Quantity      int32                         `protobuf:"varint,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
	CartHistory   []*GetCarItemtHistoryResponse `protobuf:"bytes,6,rep,name=cartHistory,proto3" json:"cartHistory,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCarItemtHistoryResponse) Reset() {
	*x = GetCarItemtHistoryResponse{}
	mi := &file_pizza_pizza_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCarItemtHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCarItemtHistoryResponse) ProtoMessage() {}

func (x *GetCarItemtHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pizza_pizza_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCarItemtHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetCarItemtHistoryResponse) Descriptor() ([]byte, []int) {
	return file_pizza_pizza_proto_rawDescGZIP(), []int{24}
}

func (x *GetCarItemtHistoryResponse) GetCartHistoryId() int32 {
	if x != nil {
		return x.CartHistoryId
	}
	return 0
}

func (x *GetCarItemtHistoryResponse) GetPizzaId() int32 {
	if x != nil {
		return x.PizzaId
	}
	return 0
}

func (x *GetCarItemtHistoryResponse) GetPizzaTypeId() int32 {
	if x != nil {
		return x.PizzaTypeId
	}
	return 0
}

func (x *GetCarItemtHistoryResponse) GetCost() float32 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *GetCarItemtHistoryResponse) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *GetCarItemtHistoryResponse) GetCartHistory() []*GetCarItemtHistoryResponse {
	if x != nil {
		return x.CartHistory
	}
	return nil
}

var File_pizza_pizza_proto protoreflect.FileDescriptor

var file_pizza_pizza_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2f, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a,
	0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64,
	0x22, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x50, 0x69,
	0x7a, 0x7a, 0x61, 0x73, 0x52, 0x06, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x06,
	0x50, 0x69, 0x7a, 0x7a, 0x61, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x22, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22,
	0x40, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x43, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a, 0x18, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x43, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x93, 0x02, 0x0a, 0x0b, 0x43, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x7a,
	0x7a, 0x61, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x69, 0x7a, 0x7a,
	0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a,
	0x0c, 0x43, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xad, 0x02, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x7a, 0x7a, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x2e, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xf5, 0x01, 0x0a, 0x09, 0x43, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x63, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x7a,
	0x7a, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x74,
	0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x72,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52,
	0x09, 0x63, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70,
	0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0xd5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x63, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x61,
	0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b,
	0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x41, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x72, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x22, 0xf3,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x43, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x32, 0xb2, 0x07, 0x0a, 0x0c, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x69, 0x7a, 0x7a, 0x61, 0x12, 0x19, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69,
	0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a,
	0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x7a, 0x7a,
	0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a,
	0x61, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x7a, 0x7a, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x69,
	0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a, 0x7a,
	0x61, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x7a,
	0x7a, 0x61, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x12, 0x19, 0x2e,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69,
	0x7a, 0x7a, 0x61, 0x12, 0x19, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x69, 0x7a,
	0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x10, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61, 0x72, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1e,
	0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f,
	0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x43, 0x61,
	0x72, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e,
	0x43, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x69,
	0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x1c, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x12, 0x18, 0x2e,
	0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x7a, 0x7a, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x7a, 0x7a, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x7a, 0x7a,
	0x61, 0x49, 0x6e, 0x43, 0x61, 0x72, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e,
	0x43, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x14, 0x2e, 0x70, 0x69, 0x7a, 0x7a,
	0x61, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1c, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x20, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x69, 0x7a, 0x7a, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_pizza_pizza_proto_rawDescOnce sync.Once
	file_pizza_pizza_proto_rawDescData []byte
)

func file_pizza_pizza_proto_rawDescGZIP() []byte {
	file_pizza_pizza_proto_rawDescOnce.Do(func() {
		file_pizza_pizza_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pizza_pizza_proto_rawDesc), len(file_pizza_pizza_proto_rawDesc)))
	})
	return file_pizza_pizza_proto_rawDescData
}

var file_pizza_pizza_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_pizza_pizza_proto_goTypes = []any{
	(*CreatePizzaRequest)(nil),         // 0: pizza.CreatePizzaRequest
	(*CreatePizzaResponse)(nil),        // 1: pizza.CreatePizzaResponse
	(*GetPizzasRequest)(nil),           // 2: pizza.GetPizzasRequest
	(*GetPizzasResponse)(nil),          // 3: pizza.GetPizzasResponse
	(*Pizzas)(nil),                     // 4: pizza.Pizzas
	(*GetPizzaByIdRequest)(nil),        // 5: pizza.GetPizzaByIdRequest
	(*GetPizzaByIdResponse)(nil),       // 6: pizza.GetPizzaByIdResponse
	(*UpdatePizzaRequest)(nil),         // 7: pizza.UpdatePizzaRequest
	(*UpdatePizzaResponse)(nil),        // 8: pizza.UpdatePizzaResponse
	(*DeletePizzaRequest)(nil),         // 9: pizza.DeletePizzaRequest
	(*DeletePizzaResponse)(nil),        // 10: pizza.DeletePizzaResponse
	(*CheckIsCartExistRequest)(nil),    // 11: pizza.CheckIsCartExistRequest
	(*CheckIsCartExistResponse)(nil),   // 12: pizza.CheckIsCartExistResponse
	(*CartRequest)(nil),                // 13: pizza.CartRequest
	(*CartResponse)(nil),               // 14: pizza.CartResponse
	(*CheckIsOrderedRequest)(nil),      // 15: pizza.CheckIsOrderedRequest
	(*CheckIsOrderedResponse)(nil),     // 16: pizza.CheckIsOrderedResponse
	(*OrderPizzaRequest)(nil),          // 17: pizza.OrderPizzaRequest
	(*OrderPizzaResponse)(nil),         // 18: pizza.OrderPizzaResponse
	(*CartItems)(nil),                  // 19: pizza.CartItems
	(*CartItemsResp)(nil),              // 20: pizza.CartItemsResp
	(*GetCartHistoryRequest)(nil),      // 21: pizza.GetCartHistoryRequest
	(*GetCartHistoryResponse)(nil),     // 22: pizza.GetCartHistoryResponse
	(*GetCarItemtHistoryRequest)(nil),  // 23: pizza.GetCarItemtHistoryRequest
	(*GetCarItemtHistoryResponse)(nil), // 24: pizza.GetCarItemtHistoryResponse
	(*timestamppb.Timestamp)(nil),      // 25: google.protobuf.Timestamp
}
var file_pizza_pizza_proto_depIdxs = []int32{
	4,  // 0: pizza.GetPizzasResponse.pizzas:type_name -> pizza.Pizzas
	25, // 1: pizza.OrderPizzaRequest.date:type_name -> google.protobuf.Timestamp
	19, // 2: pizza.CartItemsResp.cartItems:type_name -> pizza.CartItems
	25, // 3: pizza.GetCartHistoryResponse.date:type_name -> google.protobuf.Timestamp
	22, // 4: pizza.GetCartHistoryResponse.cartHistory:type_name -> pizza.GetCartHistoryResponse
	24, // 5: pizza.GetCarItemtHistoryResponse.cartHistory:type_name -> pizza.GetCarItemtHistoryResponse
	0,  // 6: pizza.PizzaService.CreatePizza:input_type -> pizza.CreatePizzaRequest
	0,  // 7: pizza.PizzaService.CreatePizzaType:input_type -> pizza.CreatePizzaRequest
	2,  // 8: pizza.PizzaService.GetPizzas:input_type -> pizza.GetPizzasRequest
	5,  // 9: pizza.PizzaService.GetPizzaById:input_type -> pizza.GetPizzaByIdRequest
	7,  // 10: pizza.PizzaService.UpdatePizza:input_type -> pizza.UpdatePizzaRequest
	9,  // 11: pizza.PizzaService.DeletePizza:input_type -> pizza.DeletePizzaRequest
	11, // 12: pizza.PizzaService.CheckIsCartExist:input_type -> pizza.CheckIsCartExistRequest
	13, // 13: pizza.PizzaService.Cart:input_type -> pizza.CartRequest
	15, // 14: pizza.PizzaService.CheckIsOrdered:input_type -> pizza.CheckIsOrderedRequest
	17, // 15: pizza.PizzaService.OrderPizza:input_type -> pizza.OrderPizzaRequest
	19, // 16: pizza.PizzaService.UpdatePizzaInCart:input_type -> pizza.CartItems
	21, // 17: pizza.PizzaService.GetUserHistory:input_type -> pizza.GetCartHistoryRequest
	23, // 18: pizza.PizzaService.GetCartItemHistory:input_type -> pizza.GetCarItemtHistoryRequest
	1,  // 19: pizza.PizzaService.CreatePizza:output_type -> pizza.CreatePizzaResponse
	1,  // 20: pizza.PizzaService.CreatePizzaType:output_type -> pizza.CreatePizzaResponse
	3,  // 21: pizza.PizzaService.GetPizzas:output_type -> pizza.GetPizzasResponse
	6,  // 22: pizza.PizzaService.GetPizzaById:output_type -> pizza.GetPizzaByIdResponse
	8,  // 23: pizza.PizzaService.UpdatePizza:output_type -> pizza.UpdatePizzaResponse
	10, // 24: pizza.PizzaService.DeletePizza:output_type -> pizza.DeletePizzaResponse
	12, // 25: pizza.PizzaService.CheckIsCartExist:output_type -> pizza.CheckIsCartExistResponse
	14, // 26: pizza.PizzaService.Cart:output_type -> pizza.CartResponse
	16, // 27: pizza.PizzaService.CheckIsOrdered:output_type -> pizza.CheckIsOrderedResponse
	18, // 28: pizza.PizzaService.OrderPizza:output_type -> pizza.OrderPizzaResponse
	20, // 29: pizza.PizzaService.UpdatePizzaInCart:output_type -> pizza.CartItemsResp
	22, // 30: pizza.PizzaService.GetUserHistory:output_type -> pizza.GetCartHistoryResponse
	24, // 31: pizza.PizzaService.GetCartItemHistory:output_type -> pizza.GetCarItemtHistoryResponse
	19, // [19:32] is the sub-list for method output_type
	6,  // [6:19] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pizza_pizza_proto_init() }
func file_pizza_pizza_proto_init() {
	if File_pizza_pizza_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pizza_pizza_proto_rawDesc), len(file_pizza_pizza_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pizza_pizza_proto_goTypes,
		DependencyIndexes: file_pizza_pizza_proto_depIdxs,
		MessageInfos:      file_pizza_pizza_proto_msgTypes,
	}.Build()
	File_pizza_pizza_proto = out.File
	file_pizza_pizza_proto_goTypes = nil
	file_pizza_pizza_proto_depIdxs = nil
}
