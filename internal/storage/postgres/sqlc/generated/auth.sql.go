// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: auth.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, password, email, role)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateUserParams struct {
	Name     string `json:"name"`
	Password string `json:"password"`
	Email    string `json:"email"`
	Role     string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Name,
		arg.Password,
		arg.Email,
		arg.Role,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, password, role
FROM users
WHERE name = $1
`

type GetUserByNameRow struct {
	ID       int32  `json:"id"`
	Name     string `json:"name"`
	Password string `json:"password"`
	Role     string `json:"role"`
}

func (q *Queries) GetUserByName(ctx context.Context, name string) (GetUserByNameRow, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i GetUserByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Password,
		&i.Role,
	)
	return i, err
}

const isEmailTaken = `-- name: IsEmailTaken :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE email = $1
) AS exists
`

func (q *Queries) IsEmailTaken(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, isEmailTaken, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const isNameTaken = `-- name: IsNameTaken :one
SELECT EXISTS (
    SELECT 1 FROM users WHERE name = $1
) AS exists
`

func (q *Queries) IsNameTaken(ctx context.Context, name string) (bool, error) {
	row := q.db.QueryRow(ctx, isNameTaken, name)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
